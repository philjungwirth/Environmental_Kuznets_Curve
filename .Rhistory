setwd("C:\Users\philj\OneDrive\Desktop\Arbeit\06_WU_IMSM\01_Tiltify")
setwd("C:/Users/philj/OneDrive/Desktop/Arbeit/06_WU_IMSM/01_Tiltify")
write(by_id_json, "by_id.json")
write(schedule_list_json, "schedule_list.json")
View(by_id)
by_id[[1]][[1]][["campaign_id"]]
library(wbstats)
library(readxl)
library(dplyr)
library(openxlsx)
library(tidyr)
library(stargazer)
rm(list = ls())
setwd("C:/Users/philj/OneDrive/Desktop/Uni Wien/02_Semester/05_Panel Data Econometrics")
### Search Data through the World Bank API
#CO2 Emissions
C_indicator <- wb_search("CO2 emissions")
C_indicator <- C_indicator[11,]
#Trade openness (Trade/GDP)
TO_indicator <- wb_search("Trade")
TO_indicator <- TO_indicator[279,]
#Manufacturing value added
MVA_indicator <- wb_search("value added")
MVA_indicator <- MVA_indicator[49,]
indicators <- c(C_indicator$indicator_id, TO_indicator$indicator_id,
MVA_indicator$indicator_id) #Save indicators
#Define countries
geos_iso <- c("EGY", "IRN", "JOR", "MAR", "SAU", "TUR", "TUN")
#Define Date
start <- 1990
end <- 2020
#Download World Bank data
df <- wb_data(indicator = indicators, country = geos_iso,
start_date = start, end_date = end)
#Import Energy consumption from Our World In Data
#https://ourworldindata.org/energy-production-consumption
E <- read.csv("per_capita_energy_use.csv") %>%
filter(Code %in% geos_iso) %>%
select(2:4)
colnames(E) <- c("iso3c", "date", "E_kwh")
#Import Human Development Index
#https://hdr.undp.org/data-center/documentation-and-downloads
HDI <- read.csv("HDI23_24.csv") %>%
select(c(1,6:38)) %>%
filter(iso3 %in% geos_iso) %>%
pivot_longer(cols = 2:34,
names_to = "date",
values_to = "HDI") %>%
mutate(date = as.numeric(sub(".*_", "", date)))
colnames(HDI) <- c("iso3c", "date", "HDI")
#Import KOF index (Globalization index)
#https://kof.ethz.ch/en/forecasts-and-indicators/indicators/kof-globalisation-index.html
KOF <- read_xlsx("KOFGI_2023_public.xlsx") %>%
select(c(1,3:4)) %>%
filter(code %in% geos_iso)
colnames(KOF) <- c("iso3c", "date", "KOF")
#Import GDP per capita data
#https://www.imf.org/external/datamapper/NGDPDPC@WEO/IRN/BHR/DZA/EGY/JOR/MAR/OMN/SAU/TUN/TUR
Y <- read_excel("imf_gdp_per_capita2.xls")
Y <- Y[2:11,] %>%
pivot_longer(cols = 2:51,
names_to = "date",
values_to = "Y") %>%
mutate(iso3c = "NULL") %>%
mutate(date = as.numeric(date))
colnames(Y) <- c("country", "date", "Y", "iso3c")
Y <- Y %>%
mutate(iso3c = case_when(
country == "Morocco" ~ "MAR",
country == "Saudi Arabia" ~ "SAU" ,
country == "Egypt" ~ "EGY",
country == "Iran" ~ "IRN",
country == "Jordan" ~ "JOR",
country == "Tunisia" ~ "TUN",
country == "TÃ¼rkiye, Republic of" ~ "TUR",
TRUE ~ iso3c  # Keep existing values for other countries
)) %>%
filter(iso3c %in% geos_iso) %>%
select(2:4)
df <- df %>%
left_join(Y, by = c("iso3c", "date")) %>%
left_join(E, by = c("iso3c", "date")) %>%
left_join(HDI, by = c("iso3c", "date")) %>%
left_join(KOF, by = c("iso3c", "date")) %>%
filter(date < 2020) #2020 removed due to COVID outliers
#Renaming colums to make it easier in regressions
names <- colnames(df)
names <- c(names[1:4], "CO2", "TRD", "MVA", names[8:11])
colnames(df) <- names
attr(df$Y, "label") <- "GDP per capita (PPP $)"
attr(df$E_kwh, "label") <- "Energy consumption per capita (in kWh)"
attr(df$HDI, "label") <- "Human development index"
attr(df$KOF, "label") <- "KOF index"
df_log <- df %>%
mutate(Y = log(Y), Y2 = Y^2, CO2 = log(CO2), TRD = log(TRD),
MVA = log(MVA), E_kwh = log(E_kwh), HDI = log(HDI),
KOF = log(KOF))
write.csv(df_log, "df_log.csv")
ggplot(data = df, aes(x = log(Y), y = log(CO2), color = iso3c)) +
geom_point() +
ggtitle("Enviromental Kuznet Curve", subtitle = "1990 - 2020")
df_log_attr_rem <- as.data.frame(lapply(df_log, function(col) {
attributes(col) <- NULL
return(col)
}))
stargazer(df_log_attr_rem[5:11], type = "latex")
country_codes <- c("Iran, Islamic Rep." = 1, "Tunisia" = 2, "Egypt, Arab Rep." = 3,
"Morocco" = 4, "Jordan" = 5, "Turkiye" = 6, "Saudi Arabia" = 7)
# Add a new column 'country_code' based on the country mapping
df_log <- df_log %>%
mutate(country_code = country_codes[country]) %>%
select(c(1:4, "CO2", "Y", "E_kwh", "Y2", "MVA", "HDI", "KOF"))
View(df_log)
df <- df %>% select(CO2, TRD, MVA, Y, E_kwh, HDI, KOF, Y2)
df_log_table <- df_log %>% select(CO2, TRD, MVA, Y, E_kwh, HDI, KOF)
df_log_table <- df_log %>% select(CO2, KOF, MVA, Y, E_kwh, HDI, KOF)
df_log_table <- df_log %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
# Generate statistical summaries
summaries <- df_log_table %>%
summarise_all(list(
Count = ~sum(!is.na(.)),
Mean = ~mean(., na.rm = TRUE),
Std = ~sd(., na.rm = TRUE),
Min = ~min(., na.rm = TRUE),
Q1 = ~quantile(., 0.25, na.rm = TRUE),
Median = ~median(., na.rm = TRUE),
Q3 = ~quantile(., 0.75, na.rm = TRUE),
Max = ~max(., na.rm = TRUE)
))
# Transpose and format the table
summaries_t <- t(summaries)
colnames(summaries_t) <- c('Count', 'Mean', 'Std', 'Min', '25%', 'Median', '75%', 'Max')
summaries_t <- as.data.frame(summaries_t)
# Print the table
print(summaries_t)
# Transpose and format the table
summaries_t <- t(summaries)
colnames(summaries_t) <- c('Count', 'Mean', 'Std', 'Min', '25%', 'Median', '75%', 'Max')
View(summaries_t)
View(summaries)
# Transpose and format the table
summaries_t <- as.data.frame(t(summaries))
colnames(summaries_t) <- c('Count', 'Mean', 'Std', 'Min', '25%', 'Median', '75%', 'Max')
View(summaries_t)
# Generate statistical summaries
summaries <- df_log_table %>%
summarise_all(list(
Count = ~sum(!is.na(.)),
Mean = ~mean(., na.rm = TRUE),
Std = ~sd(., na.rm = TRUE),
Min = ~min(., na.rm = TRUE),
Q1 = ~quantile(., 0.25, na.rm = TRUE),
Median = ~median(., na.rm = TRUE),
Q3 = ~quantile(., 0.75, na.rm = TRUE),
Max = ~max(., na.rm = TRUE)
))
View(summaries)
# Transpose and format the table
summaries_t <- as.data.frame(t(summaries))
# Generate statistical summaries
summaries <- df_log_table %>%
summarise_all(list(
Count = ~sum(!is.na(.)),
Mean = ~mean(., na.rm = TRUE),
Std = ~sd(., na.rm = TRUE),
Min = ~min(., na.rm = TRUE),
Q1 = ~quantile(., 0.25, na.rm = TRUE),
Median = ~median(., na.rm = TRUE),
Q3 = ~quantile(., 0.75, na.rm = TRUE),
Max = ~max(., na.rm = TRUE)
))
summaries_t <- t(summaries)
summaries_t <- as.data.frame(summaries_t)
colnames(summaries_t) <- names(summaries)
rownames(summaries_t) <- c('Count', 'Mean', 'Std', 'Min', '25%', 'Median', '75%', 'Max')
rownames(summaries_t) <- names(summaries)
rownames(summaries_t) <- c('Count', 'Mean', 'Std', 'Min', '25%', 'Median', '75%', 'Max')
stargazer(df_log_table, type = "text", title = "Descriptive Statistics", digits = 2,
summary.stat = c("n", "mean", "sd", "min", "p25", "median", "p75", "max"))
df_log_table <- df_log %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
View(df_log_table)
df_log_table <- df_log %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
df_log_table <- df_log_table %>%
pivot_wider(names_from = Variable, values_from = Value)
df_log_table <- t(df_log_table)
stargazer(df_log_table, type = "text", title = "Descriptive Statistics", digits = 2,
summary.stat = c("n", "mean", "sd", "min", "p25", "median", "p75", "max"))
df_log_table <- df_log %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
df_log_table <- (df_log_table)
stargazer(df_log_table, type = "text", title = "Descriptive Statistics", digits = 2,
summary.stat = c("n", "mean", "sd", "min", "p25", "median", "p75", "max"))
summary(df_log_table)
summary_stats <- summary(df_log_table)
print_summary <- function(summary_stats) {
cat("Summary Statistics for df_log_table:\n\n")
cat(sprintf("%-10s %-10s %-10s %-10s %-10s %-10s %-10s\n",
"Variable", "Min", "1st Qu.", "Median", "Mean", "3rd Qu.", "Max"))
for (i in 1:length(summary_stats)) {
cat(sprintf("%-10s %-10s %-10s %-10s %-10s %-10s %-10s\n",
names(summary_stats)[i],
summary_stats[i, "Min."],
summary_stats[i, "1st Qu."],
summary_stats[i, "Median"],
summary_stats[i, "Mean"],
summary_stats[i, "3rd Qu."],
summary_stats[i, "Max."]))
}
}
# Print the formatted summary
print_summary(summary_stats)
df_log_table <- df_log %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
summary_stats <- summary(df_log_table)
r_results_summary <- tibble(
Variable = rownames(summary_stats),
Statistic = round(summary_stats[, 1], digits = 3),  # Adjust column index as per your summary_stats structure
p_value = round(summary_stats[, 2], digits = 3)      # Adjust column index as per your summary_stats structure
)
summary_stats <-as.data.frame(summary(df_log_table))
r_results_summary <- tibble(
Variable = rownames(summary_stats),
Statistic = round(summary_stats[, 1], digits = 3),  # Adjust column index as per your summary_stats structure
p_value = round(summary_stats[, 2], digits = 3)      # Adjust column index as per your summary_stats structure
)
View(summary_stats)
df_log_table <- df_log %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
summary(df_log_table)[,1]
df_log_table <- df_log %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
View(df_log_table)
summary_stats <-summary(df_log_table)
View(df_log_table)
df_log_table <- unclass(df_log_table)
df_log_table <- df_log %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
View(df_log_table)
as
install.packages("utility")
library(utility)
install.packages("utilities")
View(df_log_attr_rem)
df_log_table <- df_log_attr_rem %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
stargazer(df_log_attr_rem[5:11], type = "latex")
stargazer(df_log_attr_rem[5:11], type = "text")
df_log_table <- df_log_attr_rem %>% select(CO2, Y, E_kwh, Y2, MVA, HDI, KOF)
df_log_attr_rem <- as.data.frame(lapply(df_log, function(col) {
attributes(col) <- NULL
return(col)
})) %>% select(CO2, Y, E_kwh, MVA, HDI, KOF)
stargazer(df_log_attr_rem, style = "qje", notes.append = FALSE, notes.align ="l", notes = "All variables are log transformed")
rm(list = ls())
setwd("C:/Users/philj/OneDrive/Dokumente/GitHub/Environmental_Kuznets_Curve")
#Import Energy consumption from Our World In Data
#https://ourworldindata.org/energy-production-consumption
E <- read.csv("~/data/per_capita_energy_use.csv") %>%
filter(Code %in% geos_iso) %>%
select(2:4)
#Import Energy consumption from Our World In Data
#https://ourworldindata.org/energy-production-consumption
E <- read.csv("~/data/per_capita_energy_use.csv") %>%
filter(Code %in% geos_iso) %>%
select(2:4)
rm(list = ls())
setwd("C:/Users/philj/OneDrive/Dokumente/GitHub/Environmental_Kuznets_Curve")
#Import Energy consumption from Our World In Data
#https://ourworldindata.org/energy-production-consumption
E <- read.csv("~/data/per_capita_energy_use.csv") %>%
filter(Code %in% geos_iso) %>%
select(2:4)
setwd("C:/Users/philj/OneDrive/Dokumente/GitHub/Environmental_Kuznets_Curve")
#Import Energy consumption from Our World In Data
#https://ourworldindata.org/energy-production-consumption
E <- read.csv("/data/per_capita_energy_use.csv") %>%
filter(Code %in% geos_iso) %>%
select(2:4)
#Import Energy consumption from Our World In Data
#https://ourworldindata.org/energy-production-consumption
E <- read.csv("~/data/per_capita_energy_use.csv") %>%
filter(Code %in% geos_iso) %>%
select(2:4)
wd <- "C:/Users/philj/OneDrive/Dokumente/GitHub/Environmental_Kuznets_Curve"
setwd(wd)
#Import Human Development Index
#https://hdr.undp.org/data-center/documentation-and-downloads
HDI <- read.csv(paste0(wd, "/data/HDI23_24.csv")) %>%
select(c(1,6:38)) %>%
filter(iso3 %in% geos_iso) %>%
pivot_longer(cols = 2:34,
names_to = "date",
values_to = "HDI") %>%
mutate(date = as.numeric(sub(".*_", "", date)))
wd <- "C:/Users/philj/OneDrive/Dokumente/GitHub/Environmental_Kuznets_Curve"
setwd(wd)
E <- read.csv(paste0(wd, "/data/per_capita_energy_use.csv"))
HDI <- read.csv(paste0(wd, "data/HDI23_24.csv"))
HDI <- read.csv(paste0(wd, "/data/HDI23_24.csv"))
KOF <- read_xlsx(paste0(wd, "/data/KOFGI_2023_public.xlsx"))
library(wbstats)
library(readxl)
library(dplyr)
library(openxlsx)
library(tidyr)
library(stargazer)
rm(list = ls())
wd <- "C:/Users/philj/OneDrive/Dokumente/GitHub/Environmental_Kuznets_Curve"
setwd(wd)
### Search Data through the World Bank API
#CO2 Emissions
C_indicator <- wb_search("CO2 emissions")
C_indicator <- C_indicator[11,]
#Trade openness (Trade/GDP)
TO_indicator <- wb_search("Trade")
TO_indicator <- TO_indicator[279,]
#Manufacturing value added
MVA_indicator <- wb_search("value added")
MVA_indicator <- MVA_indicator[49,]
indicators <- c(C_indicator$indicator_id, TO_indicator$indicator_id,
MVA_indicator$indicator_id) #Save indicators
#Define countries
geos_iso <- c("EGY", "IRN", "JOR", "MAR", "SAU", "TUR", "TUN")
#Define Date
start <- 1990
end <- 2020
#Download World Bank data
df <- wb_data(indicator = indicators, country = geos_iso,
start_date = start, end_date = end)
#Import Energy consumption from Our World In Data
#https://ourworldindata.org/energy-production-consumption
E <- read.csv(paste0(wd, "/data/per_capita_energy_use.csv")) %>%
filter(Code %in% geos_iso) %>%
select(2:4)
colnames(E) <- c("iso3c", "date", "E_kwh")
#Import Human Development Index
#https://hdr.undp.org/data-center/documentation-and-downloads
HDI <- read.csv(paste0(wd, "/data/HDI23_24.csv")) %>%
select(c(1,6:38)) %>%
filter(iso3 %in% geos_iso) %>%
pivot_longer(cols = 2:34,
names_to = "date",
values_to = "HDI") %>%
mutate(date = as.numeric(sub(".*_", "", date)))
colnames(HDI) <- c("iso3c", "date", "HDI")
#Import KOF index (Globalization index)
#https://kof.ethz.ch/en/forecasts-and-indicators/indicators/kof-globalisation-index.html
KOF <- read_xlsx(paste0(wd, "/data/KOFGI_2023_public.xlsx")) %>%
select(c(1,3:4)) %>%
filter(code %in% geos_iso)
colnames(KOF) <- c("iso3c", "date", "KOF")
#Import GDP per capita data
#https://www.imf.org/external/datamapper/NGDPDPC@WEO/IRN/BHR/DZA/EGY/JOR/MAR/OMN/SAU/TUN/TUR
Y <- read_excel(paste0(wd, "/data/imf_gdp_per_capita.xls"))
Y <- Y[2:11,] %>%
pivot_longer(cols = 2:51,
names_to = "date",
values_to = "Y") %>%
mutate(iso3c = "NULL") %>%
mutate(date = as.numeric(date))
colnames(Y) <- c("country", "date", "Y", "iso3c")
Y <- Y %>%
mutate(iso3c = case_when(
country == "Morocco" ~ "MAR",
country == "Saudi Arabia" ~ "SAU" ,
country == "Egypt" ~ "EGY",
country == "Iran" ~ "IRN",
country == "Jordan" ~ "JOR",
country == "Tunisia" ~ "TUN",
country == "TÃ¼rkiye, Republic of" ~ "TUR",
TRUE ~ iso3c  # Keep existing values for other countries
)) %>%
filter(iso3c %in% geos_iso) %>%
select(2:4)
df <- df %>%
left_join(Y, by = c("iso3c", "date")) %>%
left_join(E, by = c("iso3c", "date")) %>%
left_join(HDI, by = c("iso3c", "date")) %>%
left_join(KOF, by = c("iso3c", "date")) %>%
filter(date < 2020) #2020 removed due to COVID outliers
#Renaming colums to make it easier in regressions
names <- colnames(df)
names <- c(names[1:4], "CO2", "TRD", "MVA", names[8:11])
colnames(df) <- names
attr(df$Y, "label") <- "GDP per capita (PPP $)"
attr(df$E_kwh, "label") <- "Energy consumption per capita (in kWh)"
attr(df$HDI, "label") <- "Human development index"
attr(df$KOF, "label") <- "KOF index"
df_log <- df %>%
mutate(Y = log(Y), Y2 = Y^2, CO2 = log(CO2), TRD = log(TRD),
MVA = log(MVA), E_kwh = log(E_kwh), HDI = log(HDI),
KOF = log(KOF))
write.csv(df_log, "df_log.csv")
ggplot(data = df, aes(x = log(Y), y = log(CO2), color = iso3c)) +
geom_point() +
ggtitle("Enviromental Kuznet Curve", subtitle = "1990 - 2020")
df_log_attr_rem <- as.data.frame(lapply(df_log, function(col) {
attributes(col) <- NULL
return(col)
}))
stargazer(df_log_attr_rem[5:11], type = "latex")
country_codes <- c("Iran, Islamic Rep." = 1, "Tunisia" = 2, "Egypt, Arab Rep." = 3,
"Morocco" = 4, "Jordan" = 5, "Turkiye" = 6, "Saudi Arabia" = 7)
# Add a new column 'country_code' based on the country mapping
df_log <- df_log %>%
mutate(country_code = country_codes[country]) %>%
select(c(1:4, "CO2", "Y", "E_kwh", "Y2", "MVA", "HDI", "KOF"))
write.csv(df_log, "df_log.csv")
write.csv(df_log, paste0(wd,"/output_data/","df_log.csv"))
df_log <- df %>%
mutate(Y = log(Y), Y2 = Y^2, CO2 = log(CO2), TRD = log(TRD),
MVA = log(MVA/100), E_kwh = log(E_kwh), HDI = log(HDI),
KOF = log(KOF))
country_codes <- c("Iran, Islamic Rep." = 1, "Tunisia" = 2, "Egypt, Arab Rep." = 3,
"Morocco" = 4, "Jordan" = 5, "Turkiye" = 6, "Saudi Arabia" = 7)
# Add a new column 'country_code' based on the country mapping
df_log <- df_log %>%
mutate(country_code = country_codes[country]) %>%
select(c(1:4, "CO2", "Y", "E_kwh", "Y2", "MVA", "HDI", "KOF"))
write.csv(df_log, paste0(wd,"/output_data/","df_log.csv"))
df <- read.csv(paste0(wd,"/output_data/","df_log.csv"))
rm(list = ls())
wd <- "C:/Users/philj/OneDrive/Dokumente/GitHub/Environmental_Kuznets_Curve"
setwd(wd)
df <- read.csv(paste0(wd,"/output_data/","df_log.csv"))
#Setup
df<-pdata.frame(df, index = c("country", "date"))
df%<>%select(-c("iso2c","iso3c","TRD"))
library(wbstats)
library(readxl)
library(dplyr)
library(openxlsx)
library(magrittr)
library(tidyr)
library(plm)
library(pco)
library(cointReg)
library(urca)
rm(list = ls())
wd <- "C:/Users/philj/OneDrive/Dokumente/GitHub/Environmental_Kuznets_Curve"
setwd(wd)
df <- read.csv(paste0(wd,"/output_data/","df_log.csv"))
#Setup
df<-pdata.frame(df, index = c("country", "date"))
df%<>%select(-c("iso2c","iso3c","TRD"))
View(df)
df%<>%select(-c("iso2c","iso3c"))
fm_KOF = CO2 ~ Y + Y2 + E_kwh + KOF + MVA + HDI
pcdtest(fm_KOF,data=df,test='cd') #No rejection, we can use first generation Unit Root tests
results_IPS_L1 <- data.frame(variable = character(), test_statistic = numeric(), p_value = numeric(), stringsAsFactors = FALSE)
for (variable in c("CO2", "Y", "E_kwh", "Y2", "MVA", "HDI", "KOF")) {
result <- purtest(df[[variable]], exo = 'trend', test = 'ips', lags = 1)
test_statistic <- result$statistic$statistic
p_value <- result$statistic$p.value
results_IPS_L1 <- rbind(results_IPS_L1, data.frame(variable = variable, test_statistic = test_statistic, p_value = p_value))
}
rownames(results_IPS_L1) <- NULL
results_IPS_L3 <- data.frame(variable = character(), test_statistic = numeric(), p_value = numeric(), stringsAsFactors = FALSE)
for (variable in c("CO2", "Y", "E_kwh", "Y2", "MVA", "HDI", "KOF")) {
result <- purtest(df[[variable]], exo = 'trend', test = 'ips', lags = 3)
test_statistic <- result$statistic$statistic
p_value <- result$statistic$p.value
results_IPS_L3 <- rbind(results_IPS_L3, data.frame(variable = variable, test_statistic = test_statistic, p_value = p_value))
}
rownames(results_IPS_L3) <- NULL
results_LLC_AIC <- data.frame(variable = character(), test_statistic = numeric(), p_value = numeric(), stringsAsFactors = FALSE)
for (variable in c("CO2", "Y", "E_kwh", "Y2", "MVA", "HDI", "KOF")) {
result <- purtest(df[[variable]], exo = 'trend', lags = 'AIC')
test_statistic <- result$statistic$statistic
p_value <- result$statistic$p.value
results_LLC_AIC <- rbind(results_LLC_AIC, data.frame(variable = variable, test_statistic = test_statistic, p_value = p_value))
}
rownames(results_LLC_AIC) <- NULL
results_LLC_Hall <- data.frame(variable = character(), test_statistic = numeric(), p_value = numeric(), stringsAsFactors = FALSE)
for (variable in c("CO2", "Y", "E_kwh", "Y2", "MVA", "HDI", "KOF")) {
result <- purtest(df[[variable]], exo = 'trend', lags = 'Hall')
test_statistic <- result$statistic$statistic
p_value <- result$statistic$p.value
results_LLC_Hall <- rbind(results_LLC_Hall, data.frame(variable = variable, test_statistic = test_statistic, p_value = p_value))
}
rownames(results_LLC_Hall) <- NULL
results_Choi <- data.frame(variable = character(), test_statistic = numeric(), p_value = numeric(), stringsAsFactors = FALSE)
for (variable in c("CO2", "Y", "E_kwh", "Y2", "MVA", "HDI", "KOF")) {
result <- purtest(df[[variable]], exo = 'trend', test = "invnormal")
test_statistic <- result$statistic$statistic
p_value <- result$statistic$p.value
results_Choi <- rbind(results_Choi, data.frame(variable = variable, test_statistic = test_statistic, p_value = p_value))
}
rownames(results_Choi) <- NULL
heho_KOF = array(c(as.double(df$CO2),as.double(df$Y),as.double(df$Y2),as.double(df$E_kwh),as.double(df$KOF),as.double(df$MVA),as.double(df$HDI)),dim=c(30,7,6))
results_Pedroni <- pedroni99m(heho_KOF,type.stat=2) #We found evidence for cointegration as H0 -> no cointegration
results_Pedroni_NA_rownames <- results_Pedroni
rownames(results_Pedroni_NA_rownames[["STATISTIC"]]) <- NULL
X <- df[, c("Y","Y2", "E_kwh", "KOF", "MVA", "HDI")]%>%
data.frame()
constant_vector <- rep(1, 210)
Y<-as.numeric(df$CO2)
DOLS <- cointRegD(x=X, y=Y,deter=constant_vector,info.crit='AIC')
DOLS$theta
FMOLS <- cointRegFM(x=X, y=Y,deter=constant_vector,info.crit='AIC')
FMOLS$theta
# Estimate cointegrating vectors for model fm_KOF
johansen_results_KOF <- ca.jo(df[, c("CO2", "Y","Y2", "E_kwh", "KOF", "MVA", "HDI")], ecdet = "const", type = "trace", K = 2)
loading_matrix_KOF <- johansen_results_KOF@V
data_matrix_KOF <- as.matrix(df[, c("CO2", "Y","Y2", "E_kwh", "KOF", "MVA", "HDI")])
data_matrix_KOF <- cbind(1, data_matrix_KOF)
transformed_data_KOF <- as.data.frame(data_matrix_KOF %*% loading_matrix_KOF)
colnames(transformed_data_KOF)[1:7] <- c("CO2", "Y","Y2", "E_kwh", "KOF", "MVA", "HDI")
#Pool the transformed data and run pooled OLS regression
pooled_model_KOF <- lm(fm_KOF, data = transformed_data_KOF)
summary(pooled_model_KOF)
# Extract cointegrating vectors from the coefficients of the pooled OLS regression
cointegrating_vectors_KOF <- pooled_model_KOF$coefficients[2:ncol(transformed_data_KOF)]
# Print cointegrating vectors
print(cointegrating_vectors_KOF) #We need to determine the cointegrating rank
cointegrating_rank_KOF <- sum(johansen_results_KOF@V > 1)
print(cointegrating_rank_KOF)
View(results_IPS_L1)
